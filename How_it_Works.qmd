---
title: How it Works
author: yourname
output: html_document
---

The application is built using Google Earth Engine's JavaScript API. Here are the key components and their implementation:

## **Data Initialization and Setup**
This section establishes the foundation for the analysis by setting up the study area and loading the required datasets. It includes:
- Setting the map center and zoom level
- Defining the area of interest (AOI) with a buffer
- Initializing the time range for analysis
- Loading the MODIS temperature dataset

```js
// Basic settings
Map.setCenter(86.9252, 27.98833, 11);
var aoi = ee.Geometry.Point(86.9252, 27.98833).buffer(10000);

// Input source
var modis = ee.ImageCollection('MODIS/MOD11A2');
var start = ee.Date('2011-02-18');
var end = ee.Date('2025-03-30');
var dateRange = ee.DateRange(start, end);
```

## **Temperature Analysis Pipeline**
This section handles the temperature data processing and visualization. The process involves:
- Filtering temperature data by date and region
- Converting temperature values from Kelvin to Celsius
- Creating time series visualizations
- Implementing interactive temperature analysis

```js
// Step 1: Temperature data filtering
var modLSTday = modis.filterDate(dateRange).select('LST_Day_1km');
var modLSTnight = modis.filterDate(dateRange).select('LST_Night_1km');

// Step 2: Temperature conversion (Kelvin to Celsius)
var modLSTday_c = modLSTday.map(function(img) {
  return img.multiply(0.02).subtract(273.15);
});

// Step 3: Temperature time series visualization
var tsDay = ui.Chart.image.series({
    imageCollection: modLSTday_c,
    region: selectedPoint,
    reducer: ee.Reducer.mean(),
    scale: 1000,
    xProperty: 'system:time_start'
}).setOptions({
    title: 'Average LST Day Time Series',
    vAxis: {title: 'LST (Â°C)'}
});

// Step 4: Add temperature visualization layer
Map.addLayer(clippedLSTday_c, {
    min: -30, max: 30,
    palette: ['blue', 'limegreen', 'yellow', 'darkorange', 'red']
}, 'Mean Day Temperature');
```

## **Terrain Analysis Pipeline**
This section handles the terrain data processing and visualization. The process involves:
- Generating terrain products (slope and aspect)
- Processing route data and elevation profiles
- Creating terrain visualizations
- Implementing route selection and analysis

```js
// Step 1: Terrain analysis
var slope = ee.Terrain.slope(dem);
var aspect = ee.Terrain.aspect(dem);
var slopeMask = slope.updateMask(slope.gt(20));

// Step 2: Route elevation profiling
var calculateElevationProfile = function(route) {
    var geometry = route.geometry();
    var elevationProfile = elevation.sample({
        region: geometry,
        numPixels: 100,  // Number of sampling points
        scale: 30        // Resolution in meters
    });
    return route.set('elevationProfile', elevationProfile);
};

// Step 3: Add terrain visualization layers
Map.addLayer(slopeMask, {
    min: 20, max: 90,
    palette: ['lightgreen', 'yellow', 'orange', 'red']
}, 'Steep Slopes');

// Step 4: Implement route selection interface
var routeSelect = ui.Select({
    items: routeNames,
    onChange: function(name) {
        var selectedRoute = routesWithElevation
            .filter(ee.Filter.eq('NAME', name))
            .first();
        updateElevationChart(selectedRoute);
    }
});