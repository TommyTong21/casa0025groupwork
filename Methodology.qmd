---
title: Methodology
author: Bowen Wu, Jiahao Tong
output: html_document
---

The analysis combines temperature and terrain data to understand the environmental conditions around Mount Everest. The methodology consists of three main components:

## **Temperature Analysis**  
  
   - **Temperature Unit Conversion**:
     - Raw MODIS LST data is in Kelvin (K)
     - Conversion formula:  
     $$ Celsius = (Kelvin × 0.02) - 273.15 $$
     - Scale factor (0.02) accounts for MODIS data scaling, more details can be found (here)[https://lpdaac.usgs.gov/documents/119/MOD11_ATBD.pdf]
     - 273.15 converts from Kelvin to Celsius  
       
   - **Time Series Analysis**:
     - Utilizes `ee.Reducer.mean()` for spatial aggregation
     - Reducer computes mean temperature within specified region
     - Handles missing data through reducer's null handling
     - Preserves temporal information using `system:time_start`  
       
   - **Statistical Analysis**:
     - Temporal aggregation using `imageCollection.mean()`
     - Spatial statistics using `ee.Reduce`r statistics
     - Point-based analysis for specific locations

## **Terrain Analysis**  
  
   - **Elevation Processing**:
     - Digital Elevation Model (DEM) processing using `ee.Terrain` products
     - Slope calculation using `ee.Terrain.slope()`
     - Aspect calculation using `ee.Terrain.aspect()`  
       
   - **Route Analysis**:
     - Feature collection processing using `ee.FeatureCollection`
     - Route geometry intersection using `geometry.intersection()`
     - Elevation Profile Generation:
       - 100-point sampling along route geometry
       - Uniform point distribution using numPixels parameter
       - 30-meter resolution sampling (scale parameter)
       - Profile data stored as feature properties
       - Interactive visualization of elevation changes  
         
   - **Terrain Classification**:
     - Slope masking using `updateMask()` for steep areas (>20 degrees)
     - Aspect classification using 8-direction color coding
     - Terrain product generation using `ee.Terrain.products()`

## **Snow Cover Analysis**  
  
   - **Snow Detection**:
     - Normalized Difference Snow Index (NDSI):
     - NDSI is calculated using Sentinel-2 imagery, specifically using the green band (B3) and the shortwave infrared band (B11).  
     And the formula:  
     $$ \text{NDSI} = \frac{\text{Band 3} - \text{Band 11}}{\text{Band 3} + \text{Band 11}} $$  where values greater than 0.45 indicate snow.

     - Snow Masking: Areas with NDSI > 0.45 are classified as snow-covered, and the snow mask is applied to create a binary mask (snow vs. non-snow).

   - **Snow Cover Classification**:
     - Snow Percentage: The percentage of snow cover in each region is calculated using a reduceNeighborhood function, which computes the mean snow coverage in a defined neighborhood (kernel size of 10x10 pixels).
     - Snow Class Categories: The snow cover is classified into four categories:
       - 25% less snow (Class 1)
       - 25–50% snow (Class 2)
       - 50–75% snow (Class 3)
       - 75% more snow (Class 4)

## **Danger Index Analysis**  
  
   - The danger index is computed based on the snow class distribution, where each snow class is assigned a weight:
     - Class 1 (<25% snow): Weight = 1
     - Class 2 (25–50% snow): Weight = 2
     - Class 3 (50–75% snow): Weight = 3
     - Class 4 (>75% snow): Weight = 4  
     and the formula:  
     $$ \text{Danger Index} = \frac{f_1 \times 1 + f_2 \times 2 + f_3 \times 3 + f_4 \times 4}{f_1 + f_2 + f_3 + f_4} $$  
       
   - The danger index is calculated for each route based on the frequency of each snow class within the route’s surrounding area (buffered by 50 meters):
  
   - The frequency of each snow class is obtained by reducing the snow class image (produced from the NDSI calculation) using `ee.Reducer.frequencyHistogram()`.

   - The weighted sum of snow class frequencies is divided by the total number of pixels to produce an average danger index.  
  
## **Interactive Analysis**  
  
   - User Interface:
     - Custom UI panel implementation using `ui.Panel`
     - Interactive point selection using `Map.onClick()`
     - Route selection using ui.Select dropdown  
       
   - Dynamic Visualization:
     - Real-time chart updates using `ui.Chart`
     - Layer management using `Map.addLayer()` and `Map.remove()`
     - Legend updates using custom `ui.Panel`  
       
   - Data Interaction:
     - Point-based temperature analysis
     - Route-based elevation profiling
     - Dynamic layer toggling

## **Reference**